from math import log
import pandas as pd
from flask import Flask, render_template, request
import uitest as ut

ClassObj = ut.CTextSearch()

# inverseDict = {}
#
# pd.set_option('display.max_columns', None)
# myFile = pd.read_csv("E:/Data Mining/Dataset/craigslist-carstrucks-data/craigslistVehicles.csv")
#
# print (myFile.head(0))
# print (myFile.head(1))
#
#
# def termFreq(word, docDescription):
#     normalizeDocDescription = docDescription.lower().split()
#     docTerms = normalizeDocDescription.count(word.lower())
#     doc_length = float(len(normalizeDocDescription))
#     normalizedTermFreq = docTerms / doc_length
#     return normalizedTermFreq
#
#
# def inverseDocFreq(word):
#     docTermsNum = 0
#     totalDocs = 0
#     if word in inverseDict:
#         return inverseDict[word]
#     try:
#         for index, line1 in myFile.iterrows():
#             docDescription1 = str(line1['desc'])
#             if word.lower() in docDescription1.lower():
#                 docTermsNum += 1
#         if docTermsNum > 0:
#             idf_value = log(float(myFile.size / docTermsNum))
#             inverseDict[word] = idf_value
#             return idf_value
#         else:
#             return 0
#     except Exception as e:
#         print(e)
#         return 0
#
# def myBaseFunction(inputstring):
#     for index, line in myFile.iterrows():
#         rank = 0
#         for string in str[inputstring]:
#             try:
#                 docDescription = line['desc']
#                 termfrequency = termFreq(string, docDescription)
#                 idf_value = inverseDocFreq(string)
#                 rank += termfrequency * idf_value
#                 print(rank)
#             except Exception as e:
#                 print(e)
#                 continue

def InitialiseSearchObject():
    print("Initialising search Object")
    ClassObj.Read_and_initialise_document()
    print("Initialising term frequency")
    ClassObj.Calculating_Document_frequency()
    print("Search Initialise")



app = Flask(__name__)


@app.route('/')
def homepage():
    title = "Epic Tutorials"
    paragraph = [
        "wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!",
        "wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!wow I am learning so much great stuff!"]

    try:
        return render_template("index.html", title=title, paragraph=paragraph)
    except Exception, e:
        return str(e)


@app.route('/results', methods=['POST'])
def resultspage():
    title = "About this site"
    paragraph = ["blah blah blah memememememmeme blah blah memememe"]
    inputquery = (request.form['textinput'])
    ClassObj.Search(inputquery)
    pageType = 'about'
    return render_template("index.html", title=title, paragraph=paragraph, pageType=pageType)


InitialiseSearchObject()

print("Hello Priyana, you're awesome")

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=8080, passthrough_errors=True)